'use client';

import { useState, useEffect } from 'react';
import { generateClient } from 'aws-amplify/data';
import { Amplify } from 'aws-amplify';
import outputs from '../../../amplify_outputs.json';
import type { Schema } from '../../../amplify/data/resource';
import {
  Box,
  Typography,
  Paper,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  Grid,
  Card,
  CardContent,
  CircularProgress,
  Alert,
  IconButton,
} from '@mui/material';
import RefreshIcon from '@mui/icons-material/Refresh';
import DownloadIcon from '@mui/icons-material/Download';
import SecurityIcon from '@mui/icons-material/Security';
import BugReportIcon from '@mui/icons-material/BugReport';

// Configure Amplify
Amplify.configure(outputs);

// Generate typed Data client
const client = generateClient<Schema>();

export default function MalwareDashboard() {
  const [samples, setSamples] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [stats, setStats] = useState({
    totalSamples: 0,
    criticalThreats: 0,
    highThreats: 0,
    uniqueFamilies: 0,
  });
  const [collectStatus, setCollectStatus] = useState<{ message: string; type: 'success' | 'error' | 'info' } | null>(null);

  // Load samples on mount
  useEffect(() => {
    loadSamples();
  }, []);

  const loadSamples = async () => {
    try {
      setLoading(true);
      const { data } = await client.models.MalwareSample.list({
        limit: 100,
        authMode: 'apiKey'
      });
      
      setSamples(data || []);
      
      // Calculate stats
      if (data) {
        const critical = data.filter(s => s.threatLevel === 'CRITICAL').length;
        const high = data.filter(s => s.threatLevel === 'HIGH').length;
        const families = new Set(data.map(s => s.signature).filter(Boolean)).size;
        
        setStats({
          totalSamples: data.length,
          criticalThreats: critical,
          highThreats: high,
          uniqueFamilies: families,
        });
      }
    } catch (error) {
      console.error('Error loading samples:', error);
      setCollectStatus({ message: 'Error loading samples', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  const collectNewSamples = async () => {
    try {
      setLoading(true);
      setCollectStatus({ message: 'Adding sample malware data...', type: 'info' });
      
      // Sample data for demonstration
      const sampleData = [
        {
          sha256Hash: 'a1b2c3d4e5f6789012345678901234567890123456789012345678901234567890',
          fileName: 'trojan.exe',
          fileType: 'exe',
          signature: 'TrojanSpy.Win32',
          threatLevel: 'CRITICAL',
          threatScore: 95,
          originCountry: 'RU',
          firstSeen: new Date().toISOString(),
          tags: ['trojan', 'spyware', 'windows'],
        },
        {
          sha256Hash: 'b2c3d4e5f67890123456789012345678901234567890123456789012345678901',
          fileName: 'ransomware.docm',
          fileType: 'docm',
          signature: 'Ransomware.Emotet',
          threatLevel: 'HIGH',
          threatScore: 85,
          originCountry: 'CN',
          firstSeen: new Date().toISOString(),
          tags: ['ransomware', 'emotet', 'macro'],
        },
        {
          sha256Hash: 'c3d4e5f678901234567890123456789012345678901234567890123456789012',
          fileName: 'backdoor.dll',
          fileType: 'dll',
          signature: 'Backdoor.CobaltStrike',
          threatLevel: 'HIGH',
          threatScore: 88,
          originCountry: 'KP',
          firstSeen: new Date().toISOString(),
          tags: ['backdoor', 'cobaltstrike', 'apt'],
        },
        {
          sha256Hash: 'd4e5f6789012345678901234567890123456789012345678901234567890123',
          fileName: 'adware_installer.msi',
          fileType: 'msi',
          signature: 'Adware.Generic',
          threatLevel: 'MEDIUM',
          threatScore: 45,
          originCountry: 'US',
          firstSeen: new Date().toISOString(),
          tags: ['adware', 'pup'],
        },
        {
          sha256Hash: 'e5f67890123456789012345678901234567890123456789012345678901234',
          fileName: 'miner.sh',
          fileType: 'sh',
          signature: 'Miner.XMRig',
          threatLevel: 'MEDIUM',
          threatScore: 60,
          originCountry: 'BR',
          firstSeen: new Date().toISOString(),
          tags: ['cryptominer', 'xmrig', 'linux'],
        }
      ];
      
      // Add samples to database
      let addedCount = 0;
      for (const sample of sampleData) {
        try {
          await client.models.MalwareSample.create(sample, {
            authMode: 'apiKey'
          });
          addedCount++;
        } catch (err) {
          console.log('Sample might already exist:', err);
        }
      }
      
      setCollectStatus({ 
        message: `Successfully added ${addedCount} sample entries`, 
        type: 'success' 
      });
      
      // Reload samples after adding
      await loadSamples();
      
    } catch (error) {
      console.error('Error adding samples:', error);
      setCollectStatus({ message: 'Error adding sample data', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  const getThreatChipColor = (level?: string | null): 'error' | 'warning' | 'info' | 'success' | 'default' => {
    switch (level) {
      case 'CRITICAL': return 'error';
      case 'HIGH': return 'warning';
      case 'MEDIUM': return 'info';
      case 'LOW': return 'success';
      default: return 'default';
    }
  };

  return (
    <Box sx={{ p: 3 }}>
      {/* Header */}
      <Box sx={{ mb: 4 }}>
        <Typography variant="h4" sx={{ fontWeight: 700, mb: 1, display: 'flex', alignItems: 'center', gap: 1 }}>
          <SecurityIcon fontSize="large" />
          ThreatPulse Intelligence Hub
        </Typography>
        <Typography variant="body1" sx={{ color: 'text.secondary' }}>
          Advanced Cyber Threat Intelligence & Malware Analysis Platform
        </Typography>
      </Box>

      {/* Stats Cards */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="textSecondary" gutterBottom variant="overline">
                Total Samples
              </Typography>
              <Typography variant="h4" component="div">
                {stats.totalSamples}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card sx={{ bgcolor: 'error.light' }}>
            <CardContent>
              <Typography gutterBottom variant="overline" sx={{ color: 'error.contrastText' }}>
                Critical Threats
              </Typography>
              <Typography variant="h4" component="div" sx={{ color: 'error.contrastText' }}>
                {stats.criticalThreats}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card sx={{ bgcolor: 'warning.light' }}>
            <CardContent>
              <Typography gutterBottom variant="overline" sx={{ color: 'warning.contrastText' }}>
                High Threats
              </Typography>
              <Typography variant="h4" component="div" sx={{ color: 'warning.contrastText' }}>
                {stats.highThreats}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="textSecondary" gutterBottom variant="overline">
                Unique Families
              </Typography>
              <Typography variant="h4" component="div">
                {stats.uniqueFamilies}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Actions and Status */}
      <Paper sx={{ p: 3, mb: 4 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Typography variant="h6">Data Collection</Typography>
          <Box sx={{ display: 'flex', gap: 2 }}>
            <Button
              variant="contained"
              startIcon={<DownloadIcon />}
              onClick={collectNewSamples}
              disabled={loading}
            >
              Add Sample Data
            </Button>
            <IconButton onClick={loadSamples} disabled={loading}>
              <RefreshIcon />
            </IconButton>
          </Box>
        </Box>
        {collectStatus && (
          <Alert severity={collectStatus.type} onClose={() => setCollectStatus(null)}>
            {collectStatus.message}
          </Alert>
        )}
      </Paper>

      {/* Samples Table */}
      <Paper>
        <Box sx={{ p: 2, borderBottom: 1, borderColor: 'divider' }}>
          <Typography variant="h6">Recent Malware Samples</Typography>
        </Box>
        
        {loading ? (
          <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>
            <CircularProgress />
          </Box>
        ) : samples.length === 0 ? (
          <Box sx={{ p: 4, textAlign: 'center' }}>
            <BugReportIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />
            <Typography variant="body1" color="text.secondary">
              No samples found. Click "Add Sample Data" to get started.
            </Typography>
          </Box>
        ) : (
          <TableContainer>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Threat Level</TableCell>
                  <TableCell>File Name</TableCell>
                  <TableCell>Signature</TableCell>
                  <TableCell>File Type</TableCell>
                  <TableCell>Country</TableCell>
                  <TableCell>SHA256</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {samples.slice(0, 20).map((sample) => (
                  <TableRow key={sample.id} hover>
                    <TableCell>
                      <Chip
                        label={sample.threatLevel || 'N/A'}
                        color={getThreatChipColor(sample.threatLevel)}
                        size="small"
                      />
                    </TableCell>
                    <TableCell>{sample.fileName || 'Unknown'}</TableCell>
                    <TableCell>{sample.signature || 'Unknown'}</TableCell>
                    <TableCell>{sample.fileType || 'Unknown'}</TableCell>
                    <TableCell>{sample.originCountry || 'Unknown'}</TableCell>
                    <TableCell>
                      <Typography variant="body2" sx={{ fontFamily: 'monospace', fontSize: '0.85rem' }}>
                        {sample.sha256Hash?.substring(0, 16)}...
                      </Typography>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        )}
      </Paper>
    </Box>
  );
}