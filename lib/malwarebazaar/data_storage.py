import json
import csv
import pandas as pd
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class DataStorage:
    def __init__(self, base_dir: str = "data"):
        self.base_dir = Path(base_dir)
        self.base_dir.mkdir(parents=True, exist_ok=True)
        
        self.raw_dir = self.base_dir / "raw"
        self.processed_dir = self.base_dir / "processed"
        self.reports_dir = self.base_dir / "reports"
        
        for dir_path in [self.raw_dir, self.processed_dir, self.reports_dir]:
            dir_path.mkdir(parents=True, exist_ok=True)
    
    def save_json(self, data: Dict[str, Any], filename: str, subfolder: str = "raw") -> Path:
        target_dir = self.base_dir / subfolder
        target_dir.mkdir(parents=True, exist_ok=True)
        
        filepath = target_dir / f"{filename}.json"
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False, default=str)
        
        logger.info(f"Data saved to {filepath}")
        return filepath
    
    def load_json(self, filename: str, subfolder: str = "raw") -> Optional[Dict[str, Any]]:
        filepath = self.base_dir / subfolder / f"{filename}.json"
        
        if not filepath.exists():
            logger.warning(f"File not found: {filepath}")
            return None
        
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def save_csv(self, data: List[Dict[str, Any]], filename: str, subfolder: str = "processed") -> Path:
        target_dir = self.base_dir / subfolder
        target_dir.mkdir(parents=True, exist_ok=True)
        
        filepath = target_dir / f"{filename}.csv"
        
        if data:
            df = pd.DataFrame(data)
            df.to_csv(filepath, index=False, encoding='utf-8')
            logger.info(f"CSV saved to {filepath}")
        else:
            logger.warning("No data to save to CSV")
        
        return filepath
    
    def save_excel(self, data: List[Dict[str, Any]], filename: str, subfolder: str = "processed") -> Path:
        target_dir = self.base_dir / subfolder
        target_dir.mkdir(parents=True, exist_ok=True)
        
        filepath = target_dir / f"{filename}.xlsx"
        
        if data:
            df = pd.DataFrame(data)
            with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
                df.to_excel(writer, index=False, sheet_name='MalwareData')
            logger.info(f"Excel file saved to {filepath}")
        else:
            logger.warning("No data to save to Excel")
        
        return filepath
    
    def process_malware_data(self, raw_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        processed_samples = []
        
        if raw_data.get("query_status") == "ok" and "data" in raw_data:
            samples = raw_data.get("data", [])
            
            if isinstance(samples, list):
                for sample in samples:
                    processed_sample = self._extract_sample_info(sample)
                    processed_samples.append(processed_sample)
            elif isinstance(samples, dict):
                processed_sample = self._extract_sample_info(samples)
                processed_samples.append(processed_sample)
        
        return processed_samples
    
    def _extract_sample_info(self, sample: Dict[str, Any]) -> Dict[str, Any]:
        return {
            "sha256_hash": sample.get("sha256_hash", ""),
            "sha1_hash": sample.get("sha1_hash", ""),
            "md5_hash": sample.get("md5_hash", ""),
            "file_name": sample.get("file_name", ""),
            "file_size": sample.get("file_size", 0),
            "file_type": sample.get("file_type", ""),
            "file_type_mime": sample.get("file_type_mime", ""),
            "signature": sample.get("signature", ""),
            "clamav": sample.get("clamav", ""),
            "first_seen": sample.get("first_seen", ""),
            "last_seen": sample.get("last_seen", ""),
            "reporter": sample.get("reporter", ""),
            "origin_country": sample.get("origin_country", ""),
            "imphash": sample.get("imphash", ""),
            "tlsh": sample.get("tlsh", ""),
            "telfhash": sample.get("telfhash", ""),
            "gimphash": sample.get("gimphash", ""),
            "dhash_icon": sample.get("dhash_icon", ""),
            "tags": ", ".join(sample.get("tags", [])) if sample.get("tags") else "",
            "delivery_method": sample.get("delivery_method", ""),
            "intelligence": {
                "downloads": sample.get("intelligence", {}).get("downloads", 0),
                "uploads": sample.get("intelligence", {}).get("uploads", 0),
                "mail": sample.get("intelligence", {}).get("mail", {})
            }
        }
    
    def create_summary_report(self, processed_data: List[Dict[str, Any]], report_name: str) -> Path:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_filename = f"{report_name}_{timestamp}"
        
        summary = {
            "timestamp": datetime.now().isoformat(),
            "total_samples": len(processed_data),
            "date_range": {
                "earliest": min((s.get("first_seen", "") for s in processed_data), default=""),
                "latest": max((s.get("last_seen", "") for s in processed_data), default="")
            },
            "file_types": {},
            "signatures": {},
            "countries": {},
            "tags": {},
            "top_reporters": {}
        }
        
        for sample in processed_data:
            file_type = sample.get("file_type", "unknown")
            summary["file_types"][file_type] = summary["file_types"].get(file_type, 0) + 1
            
            signature = sample.get("signature", "unknown")
            if signature:
                summary["signatures"][signature] = summary["signatures"].get(signature, 0) + 1
            
            country = sample.get("origin_country", "unknown")
            if country:
                summary["countries"][country] = summary["countries"].get(country, 0) + 1
            
            tags = sample.get("tags", "").split(", ")
            for tag in tags:
                if tag:
                    summary["tags"][tag] = summary["tags"].get(tag, 0) + 1
            
            reporter = sample.get("reporter", "unknown")
            if reporter:
                summary["top_reporters"][reporter] = summary["top_reporters"].get(reporter, 0) + 1
        
        summary["file_types"] = dict(sorted(summary["file_types"].items(), 
                                           key=lambda x: x[1], reverse=True)[:10])
        summary["signatures"] = dict(sorted(summary["signatures"].items(), 
                                           key=lambda x: x[1], reverse=True)[:10])
        summary["countries"] = dict(sorted(summary["countries"].items(), 
                                          key=lambda x: x[1], reverse=True)[:10])
        summary["tags"] = dict(sorted(summary["tags"].items(), 
                                     key=lambda x: x[1], reverse=True)[:20])
        summary["top_reporters"] = dict(sorted(summary["top_reporters"].items(), 
                                              key=lambda x: x[1], reverse=True)[:10])
        
        report_path = self.save_json(summary, report_filename, "reports")
        logger.info(f"Summary report created: {report_path}")
        
        return report_path