import requests
import json
import time
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class MalwareBazaarAPI:
    def __init__(self, api_key: Optional[str] = None):
        self.base_url = "https://mb-api.abuse.ch/api/v1/"
        self.api_key = api_key
        self.session = requests.Session()
        if api_key:
            self.session.headers.update({"Auth-Key": api_key})
        self.session.headers.update({"User-Agent": "MalwareBazaar Python Client/1.0"})
        
    def query_recent_samples(self, limit: int = 100) -> Dict[str, Any]:
        endpoint = self.base_url
        data = {
            "query": "get_recent",
            "selector": str(limit)
        }
        
        try:
            response = self.session.post(endpoint, data=data)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"Error fetching recent samples: {e}")
            return {"query_status": "error", "data": []}
    
    def query_by_hash(self, file_hash: str) -> Dict[str, Any]:
        endpoint = self.base_url
        data = {
            "query": "get_info",
            "hash": file_hash
        }
        
        try:
            response = self.session.post(endpoint, data=data)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"Error querying hash {file_hash}: {e}")
            return {"query_status": "error", "data": None}
    
    def query_by_tag(self, tag: str, limit: int = 100) -> Dict[str, Any]:
        endpoint = self.base_url
        data = {
            "query": "get_taginfo",
            "tag": tag,
            "limit": str(limit)
        }
        
        try:
            response = self.session.post(endpoint, data=data)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"Error querying tag {tag}: {e}")
            return {"query_status": "error", "data": []}
    
    def query_by_signature(self, signature: str, limit: int = 100) -> Dict[str, Any]:
        endpoint = self.base_url
        data = {
            "query": "get_siginfo",
            "signature": signature,
            "limit": str(limit)
        }
        
        try:
            response = self.session.post(endpoint, data=data)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"Error querying signature {signature}: {e}")
            return {"query_status": "error", "data": []}
    
    def query_by_file_type(self, file_type: str, limit: int = 100) -> Dict[str, Any]:
        endpoint = self.base_url
        data = {
            "query": "get_file_type",
            "file_type": file_type,
            "limit": str(limit)
        }
        
        try:
            response = self.session.post(endpoint, data=data)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"Error querying file type {file_type}: {e}")
            return {"query_status": "error", "data": []}
    
    def query_by_clamav(self, clamav_sig: str, limit: int = 100) -> Dict[str, Any]:
        endpoint = self.base_url
        data = {
            "query": "get_clamavinfo",
            "clamav": clamav_sig,
            "limit": str(limit)
        }
        
        try:
            response = self.session.post(endpoint, data=data)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"Error querying ClamAV signature {clamav_sig}: {e}")
            return {"query_status": "error", "data": []}
    
    def query_by_imphash(self, imphash: str, limit: int = 100) -> Dict[str, Any]:
        endpoint = self.base_url
        data = {
            "query": "get_imphash",
            "imphash": imphash,
            "limit": str(limit)
        }
        
        try:
            response = self.session.post(endpoint, data=data)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"Error querying imphash {imphash}: {e}")
            return {"query_status": "error", "data": []}
    
    def query_by_tlsh(self, tlsh: str, limit: int = 100) -> Dict[str, Any]:
        endpoint = self.base_url
        data = {
            "query": "get_tlsh",
            "tlsh": tlsh,
            "limit": str(limit)
        }
        
        try:
            response = self.session.post(endpoint, data=data)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"Error querying TLSH {tlsh}: {e}")
            return {"query_status": "error", "data": []}
    
    def download_sample(self, sha256_hash: str, output_dir: str = "samples") -> bool:
        endpoint = self.base_url
        data = {
            "query": "get_file",
            "sha256_hash": sha256_hash
        }
        
        try:
            response = self.session.post(endpoint, data=data)
            response.raise_for_status()
            
            Path(output_dir).mkdir(parents=True, exist_ok=True)
            
            output_path = Path(output_dir) / f"{sha256_hash}.zip"
            with open(output_path, 'wb') as f:
                f.write(response.content)
            
            logger.info(f"Sample downloaded: {output_path}")
            return True
            
        except requests.exceptions.RequestException as e:
            logger.error(f"Error downloading sample {sha256_hash}: {e}")
            return False
    
    def get_daily_batch(self, date: Optional[str] = None) -> Dict[str, Any]:
        if date is None:
            date = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
        
        url = f"https://datalake.abuse.ch/malwarebazaar/daily/{date}.tar.bz2"
        
        try:
            response = requests.get(url, stream=True)
            response.raise_for_status()
            
            output_path = Path("data") / f"daily_batch_{date}.tar.bz2"
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(output_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            
            logger.info(f"Daily batch downloaded: {output_path}")
            return {"status": "success", "file": str(output_path)}
            
        except requests.exceptions.RequestException as e:
            logger.error(f"Error downloading daily batch for {date}: {e}")
            return {"status": "error", "message": str(e)}